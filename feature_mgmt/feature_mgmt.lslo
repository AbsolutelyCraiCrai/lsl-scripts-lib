integer cli_listener;

default
{
    state_entry()
    {
        cli_listener = llListen( PUBLIC_CHANNEL, "", "", "" );
        llListenControl( cli_listener, FALSE );
    }

    link_message( integer sender, integer value, string text, key id )
    {
        if( value == -11000 + 1 )
        {
            key req_id = id;

            string config_data = llLinksetDataRead( "FeatureConfiguration\\" + text );
            if( config_data == "" )
            {
                llMessageLinked(
                    sender,
                    -11000 + 2,
                    text,
                    llList2Json(
                        JSON_OBJECT,
                        [
                            "req_id", req_id,
                            "error", "ERR_FEATURE_INVALID"
                        ]
                    )
                );
                return;
            }

            llMessageLinked(
                sender,
                -11000 + 2,
                text,
                llList2Json(
                    JSON_OBJECT,
                    [
                        "req_id", req_id,
                        "state", ( (integer)config_data & 0xF ),
                        "variant", ( (integer)config_data >> 4 )
                    ]
                )
            );
        }
        else if( value == -11000 + 3 )
        {
            string state_val = llJsonGetValue( (string)id, [ "state" ] );
            string variant_val = llJsonGetValue( (string)id, [ "variant" ] );

            if( state_val == JSON_INVALID || variant_val == JSON_INVALID )
                return;

            integer state_val_i = (integer)state_val;
            integer variant_val_i = (integer)variant_val;
            if( state_val_i < 0 ||
                state_val_i > 2 ||
                variant_val_i < 0 )
            {
                llRegionSay( DEBUG_CHANNEL, "Error: State or variant parameters for FEATURE_SET_CONFIG were set to invalid values." );
                return;
            }

            llLinksetDataWrite(
                "FeatureConfiguration\\" + text,
                (string)( variant_val_i << 4 | state_val_i )
            );
        }
        else if( value == -11000 + 4 )
        {
            list features = llLinksetDataFindKeys( "^FeatureConfiguration\\\\", 0, 0 );

            integer i;
            for( i = 0; i < llGetListLength( features ); i++ )
                llLinksetDataDelete(
                    llList2String(features, 0 )                    
                );
        }
        else if( value == -11000 + 5 )
        {
            if( text == "EnableCLI" )
            {
                llListenControl( cli_listener, TRUE );
            }
            else if( text == "DisableCLI" )
            {
                llListenControl( cli_listener, FALSE );
            }
        }
        else if( value == -11000 + 2 )
        {
            string json = (string)id;

            if( llJsonGetValue( json, [ "req_id" ] ) == "cli" )
            {
                if( llJsonGetValue( json, [ "error" ] ) == "ERR_FEATURE_INVALID" )
                {
                    llOwnerSay( "The requested feature is not configured." );
                    return;
                }

                string state_str = "Default";
                if( llJsonGetValue( json, [ "state" ] ) == (string)2 )
                    state_str = "Enabled";
                else if( llJsonGetValue( json, [ "state" ] ) == (string)1 )
                    state_str = "Disabled";

                llOwnerSay( "Feature configuration for feature \"" + text + "\":" );
                llOwnerSay( "State: " + state_str );
                llOwnerSay( "Variant: " + (string)llJsonGetValue( json, [ "variant" ] ) );
            }
        }
    }

    listen( integer channel, string name, key id, string message )
    {
        if( message == "/features_reset" )
        {
            llMessageLinked(
                LINK_THIS,
                -11000 + 4,
                "",
                ""
            );
        }
        else if( llSubStringIndex( message, "/features_set" ) == 0 )
        {
            list config = llParseString2List( message, [ " " ], [] );
            if( llGetListLength( config ) != 4 )
                return;
            
            string feature = llList2String(config, 1 );
            integer feature_state = llList2Integer(config, 2 );
            integer feature_variant = llList2Integer(config, 3 );

            if( feature_state < 0 ||
                feature_state > 2 ||
                feature_variant < 0 )
            {
                llOwnerSay( "Error: Feature state or variant is an invalid value." );
                return;
            }

            llMessageLinked(
                LINK_THIS,
                -11000 + 3,
                feature,
                llList2Json(
                    JSON_OBJECT,
                    [
                        "state", feature_state,
                        "variant", feature_variant
                    ]
                )
            );

            llOwnerSay( "Feature configuration for \"" + feature + "\" updated." );
        }
        else if( llSubStringIndex( message, "/features_get" ) == 0 )
        {
            list config = llParseString2List( message, [ " " ], [] );
            if( llGetListLength( config ) != 2 )
                return;
            
            string feature = llList2String(config, 1 );

            llMessageLinked(
                LINK_THIS,
                -11000 + 1,
                feature,
                "cli"
            );
        }
        else if( llSubStringIndex( message, "/features_list" ) == 0 )
        {
            list features = llLinksetDataFindKeys( "^FeatureConfiguration\\\\", 0, 0 );

            if( !llGetListLength( features ) )
            {
                llOwnerSay( "No feature configurations available." );
                return;
            }
            
            integer i;
            for( i = 0; i < llGetListLength( features ); i++ )
                llMessageLinked(
                    LINK_THIS,
                    -11000 + 1,
                    llGetSubString( llList2String(features, 0 ), 21, -1 ),
                    "cli"
                );
        }
        else if( llSubStringIndex( message, "/features_delete" ) == 0 )
        {
            list config = llParseString2List( message, [ " " ], [] );
            if( llGetListLength( config ) != 2 )
                return;
            
            string feature = llList2String(config, 1 );

            llLinksetDataDelete(
                "FeatureConfiguration\\" + feature
            );

            llOwnerSay( "Feature \"" + feature + "\" deleted." );
        }
    }
}